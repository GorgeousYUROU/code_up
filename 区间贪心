
/*
2.区间贪心
给出N个开区间（x,y），从中选择尽可能多的开区间，使得这些开区间两两之间没有交集

例如：（1,3）、（2,4）、（3,5）、（6,7） 最多选3个：（1,3），（3,5）、（6,7）

贪心算法思想：

基础两点：

a.优先选择短的区间
b.如果存在一个区间包含另一个区间，应选择更小的区间． 


算法（左端点为例）

1、对区间左端点进行从大到小排序，左端点相同按右端点从小到大排序 （右端点排序遵循b原则）
2、依次选出左端点最大的区间，当待选择区间与已选区间集合相交时，舍弃待选区间
3、首先:排好后的第一个不是原始序列的第一个。其次：每次直接从排好后的第一个开始选，也是为了使左边预留区间最大
--------------------- 
作者：树叶子_ 
来源：CSDN 
原文：https://blog.csdn.net/hza419763578/article/details/82952136 
版权声明：本文为博主原创文章，转载请附上博文链接！



*/


#include<iostream>		 
using namespace std;
 
struct Inteval
{
	int x,y;//开区间左右端点
}I[1000];
 
bool cmp(Inteval a,Inteval b){
	if(a.x!=b.x) return a.x>b.x;//左端点从大到小排序
	else return a.y<b.y; //左端点相同 按右端点从小到大排序 即左端点相同，优先选择短的
}
 
int main(){
	int n;//先输入区间个数
	while(cin>>n){
		for(int i=0;i<n;i++){
			cin>>I[i].x>>I[i].y;
		}
		sort(I,I+n,cmp);
		int ans=1,lastx=I[0].x;//选中x最大的第一个
		cout<<"选择以下区间:"<<endl;
		cout<<"("<<I[0].x<<","<<I[0].y<<")"<<endl;
		for(int i=1;i<n;i++){
			if(I[i].y<=lastx){//不重叠  闭区间 小于等于
				lastx=I[i].x;
				ans++;
				cout<<"("<<I[i].x<<","<<I[i].y<<")"<<endl;
			}
		}
		cout<<"共计"<<ans<<"个区间！"<<endl;//最多个数
	}
 
	return 0;
}
 
 
